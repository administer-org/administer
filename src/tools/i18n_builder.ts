import fs from 'fs-extra';

function luaToJson(lua: string): any {
    let jsonString = lua
        .replace(/^return\s*/, '')
        .trim()
        .replace(/--.*/g, '');

    jsonString = jsonString
        .replace(/,(?=\s*[}\]])/g, '')
        .replace(/(['"])((?:\\.|(?!\1).)*?)\1/g, (match, quote, content) => {
            const escapedContent = content
                .replace(/\\/g, '\\\\')
                .replace(/"/g, '\\"');
            return `"${escapedContent}"`;
        });

    jsonString = jsonString
        .replace(/([{,]\s*)([a-zA-Z_]\w*)\s*=/g, '$1"$2" =')
        .replace(/\s*=\s*/g, ': ')
        .replace(/\["([^"]+)"\]\s*:/g, '"$1":')
        .replace(/\['([^']+)']\s*:/g, '"$1":');

    try {
        return JSON.parse(jsonString);
    } catch (error) {
        throw new Error(`Failed to convert Lua to JSON. Intermediate state: ${jsonString}. Error: ${error}`);
    }
}

function serializeToLua(value: any, indent = 0): string {
    const indentStr = '  '.repeat(indent);

    if (typeof value === 'string') {
        const escaped = value
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\r\n|\r|\n/g, '\\n');

        return `"${escaped}"`;
    }

    if (typeof value === 'number' || typeof value === 'boolean') {
        return String(value);
    }

    if (Array.isArray(value)) {
        return `{ ${value.map(v => serializeToLua(v, indent)).join(', ')} }`;
    }

    if (typeof value === 'object' && value !== null) {
        const entries = Object.entries(value).map(
            ([k, v]) =>
                `${indentStr}  ["${k}"] = ${serializeToLua(v, indent + 1)}`
        );
        return `{\n${entries.join(',\n')}\n${indentStr}}`;
    }

    return 'nil';
}

function jsonToLua(
    jsonObj: { [key: string]: any },
    filePath: string
): string {
    return `--// # THIS IS AN AUTOGENERATED FILE - DO NOT EDIT\n--// Compilation Date: ${new Date()}\n--// Source file: ${filePath}\nreturn ${serializeToLua(jsonObj)}`;
}

async function convertLuaFileToJson(luaContent: string): Promise<any> {
    try {
        if (!luaContent) throw new Error('Lua file is empty or could not be read.');

        return luaToJson(luaContent);
    } catch (err) {
        console.error('Error converting Lua file to JSON:', err);
        
        return { failed: true, error: String(err) };
    }
}

async function convertJsonFileToLua(jsonFilePath: string, luaFilePath: string): Promise<void> {
    try {
        await fs.writeFile(
            luaFilePath,
            jsonToLua(
                JSON.parse((await fs.readFile(jsonFilePath, 'utf-8'))),
                luaFilePath
            ), 'utf-8');

        console.log(`Wrote ${luaFilePath}`);
    } catch (err) {
        console.error(`[x] Failed to convert ${jsonFilePath}:`, err);
    }
}

export { luaToJson, jsonToLua, convertLuaFileToJson, convertJsonFileToLua }
